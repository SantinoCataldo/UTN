<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/ej3/Cancion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ej3/Cancion.java" />
              <option name="originalContent" value="package ej3;&#10;&#10;public class Cancion  {&#10;    private String nombre;&#10;    private int duracion;&#10;    private Genero genero;&#10;    private Artista artistaInvitado;&#10;    private Album album;&#10;&#10;    public Cancion(String nombre, int duracion, Genero genero, Artista artistaInvitado, Album album) {&#10;        this.album = album;&#10;        this.nombre = nombre;&#10;        this.duracion = duracion;&#10;        this.genero = genero;&#10;        this.artistaInvitado = artistaInvitado;&#10;    }&#10;&#10;    public String getNombre() {&#10;        return nombre;&#10;    }&#10;&#10;    public int getDuracion() {&#10;        return duracion;&#10;    }&#10;&#10;    public Genero getGenero() {&#10;        return genero;&#10;    }&#10;&#10;    public Artista getArtistaInvitado() {&#10;        return artistaInvitado;&#10;    }&#10;&#10;    public Album getAlbum() {&#10;        return album;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ej3;&#13;&#10;&#13;&#10;public class Cancion  {&#13;&#10;    private String nombre;&#13;&#10;    private int duracion;&#13;&#10;    private Genero genero;&#13;&#10;    private Artista artistaInvitado;&#13;&#10;    private Album album;&#13;&#10;&#13;&#10;    public Cancion(String nombre, int duracion, Genero genero, Artista artistaInvitado, Album album) {&#13;&#10;        this.album = album;&#13;&#10;        this.nombre = nombre;&#13;&#10;        this.duracion = duracion;&#13;&#10;        this.genero = genero;&#13;&#10;        this.artistaInvitado = artistaInvitado;&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getNombre() {&#13;&#10;        return nombre;&#13;&#10;    }&#13;&#10;&#13;&#10;    public int getDuracion() {&#13;&#10;        return duracion;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Genero getGenero() {&#13;&#10;        return genero;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Artista getArtistaInvitado() {&#13;&#10;        return artistaInvitado;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Album getAlbum() {&#13;&#10;        return album;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ej3/EjemploLoops.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ej3/EjemploLoops.java" />
              <option name="updatedContent" value="package ej3;&#10;&#10;import java.util.LinkedList;&#10;&#10;public class EjemploLoops {&#10;    public static void main(String[] args) {&#10;        // Crear una lista de ejemplo&#10;        LinkedList&lt;String&gt; canciones = new LinkedList&lt;&gt;();&#10;        canciones.add(&quot;Bohemian Rhapsody&quot;);&#10;        canciones.add(&quot;Hotel California&quot;);&#10;        canciones.add(&quot;Stairway to Heaven&quot;);&#10;        &#10;        System.out.println(&quot;=== COMPARACIÓN DE LOOPS ===\n&quot;);&#10;        &#10;        // OPCIÓN 1: For tradicional con índice&#10;        System.out.println(&quot;1. FOR TRADICIONAL (con índice):&quot;);&#10;        System.out.println(&quot;✅ Ventajas: Tienes acceso al índice, puedes mostrar números de posición&quot;);&#10;        for (int i = 0; i &lt; canciones.size(); i++) {&#10;            String cancion = canciones.get(i);&#10;            System.out.println(&quot;   &quot; + (i + 1) + &quot;. &quot; + cancion);&#10;        }&#10;        &#10;        System.out.println(&quot;\n2. FOR-EACH (enhanced for loop):&quot;);&#10;        System.out.println(&quot;✅ Ventajas: Más simple y legible&quot;);&#10;        System.out.println(&quot;❌ Desventajas: No tienes acceso al índice&quot;);&#10;        for (String cancion : canciones) {&#10;            System.out.println(&quot;   - &quot; + cancion);&#10;        }&#10;        &#10;        System.out.println(&quot;\n=== ¿CUÁNDO USAR CADA UNO? ===&quot;);&#10;        System.out.println(&quot;\nUSA FOR TRADICIONAL cuando:&quot;);&#10;        System.out.println(&quot;• Necesites mostrar números de posición (1, 2, 3...)&quot;);&#10;        System.out.println(&quot;• El usuario debe seleccionar por número&quot;);&#10;        System.out.println(&quot;• Necesites modificar elementos por índice&quot;);&#10;        System.out.println(&quot;• Requieras acceso al índice para alguna operación&quot;);&#10;        &#10;        System.out.println(&quot;\nUSA FOR-EACH cuando:&quot;);&#10;        System.out.println(&quot;• Solo necesites leer/mostrar los elementos&quot;);&#10;        System.out.println(&quot;• No requieras números de posición&quot;);&#10;        System.out.println(&quot;• Quieras código más limpio y legible&quot;);&#10;        System.out.println(&quot;• No necesites modificar la colección durante la iteración&quot;);&#10;        &#10;        System.out.println(&quot;\n=== EN NUESTRO CASO (ListaPremium) ===&quot;);&#10;        System.out.println(&quot; Usamos FOR TRADICIONAL porque:&quot;);&#10;        System.out.println(&quot;   • Mostramos números (1, 2, 3...) para que el usuario elija&quot;);&#10;        System.out.println(&quot;   • Usamos get(opcion-1) para obtener la canción seleccionada&quot;);&#10;        System.out.println(&quot;   • Usamos remove(opcion-1) para eliminar por posición&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ej3/Genero.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ej3/Genero.java" />
              <option name="originalContent" value="package ej3;&#10;&#10;public enum Genero {&#10;    ROCK,&#10;    TRAP,&#10;    JAZZ,&#10;    HIP_HOP,&#10;    POP,&#10;    METAL,&#10;    CLASICA&#10;}&#10;" />
              <option name="updatedContent" value="package ej3;&#13;&#10;&#13;&#10;public enum Genero {&#13;&#10;    ROCK,&#13;&#10;    TRAP,&#13;&#10;    JAZZ,&#13;&#10;    HIP_HOP,&#13;&#10;    POP,&#13;&#10;    METAL,&#13;&#10;    CLASICA&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ej3/ListaPremium.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ej3/ListaPremium.java" />
              <option name="originalContent" value="package ej3;&#10;&#10;import java.util.LinkedList;&#10;import java.util.Scanner;&#10;&#10;public class ListaPremium implements Reproduccion {&#10;    private String nombre;&#10;    private LinkedList&lt;Cancion&gt; miLista = new LinkedList&lt;&gt;();&#10;&#10;    public ListaPremium(String nombre) {&#10;        this.nombre = nombre;&#10;    }&#10;&#10;    @Override&#10;    public void reproducir() {&#10;        if (miLista.isEmpty()) {&#10;            System.out.println(&quot;No hay canciones en la lista.&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;Selecciona una canción para reproducir:&quot;);&#10;        for (int i = 0; i &lt; miLista.size(); i++) {&#10;            Cancion c = miLista.get(i);&#10;            System.out.println((i + 1) + &quot;. &quot; + c.getNombre() + &quot; - &quot; + c.getAlbum().getArtista().getNombre());&#10;        }&#10;&#10;        Scanner scanner = new Scanner(System.in);&#10;        System.out.print(&quot;Ingresa el número de la canción: &quot;);&#10;        int opcion = scanner.nextInt();&#10;&#10;        if (opcion &gt;= 1 &amp;&amp; opcion &lt;= miLista.size()) {&#10;            Cancion cancion = miLista.get(opcion - 1);&#10;            System.out.println(&quot;---------------------------&quot;);&#10;            System.out.println(&quot;Reproduciendo: &quot; + cancion.getNombre());&#10;            System.out.println(&quot;Álbum: &quot; + cancion.getAlbum().getTitulo());&#10;            System.out.println(&quot;Género: &quot; + cancion.getGenero());&#10;            System.out.println(&quot;Artista: &quot; + cancion.getAlbum().getArtista().getNombre());&#10;            if (cancion.getArtistaInvitado() != null) {&#10;                System.out.println(&quot;Artista invitado: &quot; + cancion.getArtistaInvitado().getNombre());&#10;            }&#10;            System.out.println(&quot;Presiona 'p' para pausar y volver al menú principal.&quot;);&#10;            System.out.println(&quot;---------------------------&quot;);&#10;        } else {&#10;            System.out.println(&quot;Opción inválida.&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void añadirCancion(Cancion cancion) {&#10;        miLista.add(cancion);&#10;        System.out.println(&quot;Canción añadida: &quot; + cancion.getNombre());&#10;    }&#10;&#10;    @Override&#10;    public void eliminarCancion() {&#10;        if (miLista.isEmpty()) {&#10;            System.out.println(&quot;No hay canciones en la lista.&quot;);&#10;            return;&#10;        }&#10;&#10;        System.out.println(&quot;Selecciona una canción para eliminar:&quot;);&#10;        for (int i = 0; i &lt; miLista.size(); i++) {&#10;            Cancion c = miLista.get(i);&#10;            System.out.println((i + 1) + &quot;. &quot; + c.getNombre() + &quot; - &quot; + c.getAlbum().getArtista().getNombre());&#10;        }&#10;&#10;        Scanner scanner = new Scanner(System.in);&#10;        System.out.print(&quot;Ingresa el número de la canción a eliminar: &quot;);&#10;        int opcion = scanner.nextInt();&#10;&#10;        if (opcion &gt;= 1 &amp;&amp; opcion &lt;= miLista.size()) {&#10;            Cancion cancionEliminada = miLista.remove(opcion - 1);&#10;            System.out.println(&quot;Canción eliminada: &quot; + cancionEliminada.getNombre());&#10;        } else {&#10;            System.out.println(&quot;Opción inválida.&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void verMiLista() {&#10;        if (miLista.isEmpty()) {&#10;            System.out.println(&quot;La lista está vacía.&quot;);&#10;            return;&#10;        }&#10;        System.out.println(&quot;Lista de reproducción Premium (&quot; + nombre + &quot;):&quot;);&#10;        for (int i = 0; i &lt; miLista.size(); i++) {&#10;            Cancion c = miLista.get(i);&#10;            System.out.println((i + 1) + &quot;. &quot; + c.getNombre() + &quot; - &quot; + c.getAlbum().getArtista().getNombre());&#10;        }&#10;    }&#10;&#10;    public String getNombre() {&#10;        return nombre;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ej3;&#13;&#10;&#13;&#10;import java.util.LinkedList;&#13;&#10;import java.util.Scanner;&#13;&#10;&#13;&#10;public class ListaPremium implements Reproduccion {&#13;&#10;    private String nombre;&#13;&#10;    private LinkedList&lt;Cancion&gt; miLista = new LinkedList&lt;&gt;();&#13;&#10;&#13;&#10;    public ListaPremium(String nombre) {&#13;&#10;        this.nombre = nombre;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void reproducir() {&#13;&#10;        if (miLista.isEmpty()) {&#13;&#10;            System.out.println(&quot;No hay canciones en la lista.&quot;);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        System.out.println(&quot;Selecciona una canción para reproducir:&quot;);&#13;&#10;        for (int i = 0; i &lt; miLista.size(); i++) {&#13;&#10;            Cancion c = miLista.get(i);&#13;&#10;            System.out.println((i + 1) + &quot;. &quot; + c.getNombre() + &quot; - &quot; + c.getAlbum().getArtista().getNombre());&#13;&#10;        }&#13;&#10;&#13;&#10;        Scanner scanner = new Scanner(System.in);&#13;&#10;        System.out.print(&quot;Ingresa el número de la canción: &quot;);&#13;&#10;        int opcion = scanner.nextInt();&#13;&#10;&#13;&#10;        if (opcion &gt;= 1 &amp;&amp; opcion &lt;= miLista.size()) {&#13;&#10;            Cancion cancion = miLista.get(opcion - 1);&#13;&#10;            System.out.println(&quot;---------------------------&quot;);&#13;&#10;            System.out.println(&quot;Reproduciendo: &quot; + cancion.getNombre());&#13;&#10;            System.out.println(&quot;Álbum: &quot; + cancion.getAlbum().getTitulo());&#13;&#10;            System.out.println(&quot;Género: &quot; + cancion.getGenero());&#13;&#10;            System.out.println(&quot;Artista: &quot; + cancion.getAlbum().getArtista().getNombre());&#13;&#10;            if (cancion.getArtistaInvitado() != null) {&#13;&#10;                System.out.println(&quot;Artista invitado: &quot; + cancion.getArtistaInvitado().getNombre());&#13;&#10;            }&#13;&#10;            System.out.println(&quot;Presiona 'p' para pausar y volver al menú principal.&quot;);&#13;&#10;            System.out.println(&quot;---------------------------&quot;);&#13;&#10;        } else {&#13;&#10;            System.out.println(&quot;Opción inválida.&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void añadirCancion(Cancion cancion) {&#13;&#10;        miLista.add(cancion);&#13;&#10;        System.out.println(&quot;Canción añadida: &quot; + cancion.getNombre());&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void eliminarCancion() {&#13;&#10;        if (miLista.isEmpty()) {&#13;&#10;            System.out.println(&quot;No hay canciones en la lista.&quot;);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        System.out.println(&quot;Selecciona una canción para eliminar:&quot;);&#13;&#10;        for (int i = 0; i &lt; miLista.size(); i++) {&#13;&#10;            Cancion c = miLista.get(i);&#13;&#10;            System.out.println((i + 1) + &quot;. &quot; + c.getNombre() + &quot; - &quot; + c.getAlbum().getArtista().getNombre());&#13;&#10;        }&#13;&#10;&#13;&#10;        Scanner scanner = new Scanner(System.in);&#13;&#10;        System.out.print(&quot;Ingresa el número de la canción a eliminar: &quot;);&#13;&#10;        int opcion = scanner.nextInt();&#13;&#10;&#13;&#10;        if (opcion &gt;= 1 &amp;&amp; opcion &lt;= miLista.size()) {&#13;&#10;            Cancion cancionEliminada = miLista.remove(opcion - 1);&#13;&#10;            System.out.println(&quot;Canción eliminada: &quot; + cancionEliminada.getNombre());&#13;&#10;        } else {&#13;&#10;            System.out.println(&quot;Opción inválida.&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void verMiLista() {&#13;&#10;        if (miLista.isEmpty()) {&#13;&#10;            System.out.println(&quot;La lista está vacía.&quot;);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;        System.out.println(&quot;Lista de reproducción Premium (&quot; + nombre + &quot;):&quot;);&#13;&#10;        for (int i = 0; i &lt; miLista.size(); i++) {&#13;&#10;            Cancion c = miLista.get(i);&#13;&#10;            System.out.println((i + 1) + &quot;. &quot; + c.getNombre() + &quot; - &quot; + c.getAlbum().getArtista().getNombre());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public String getNombre() {&#13;&#10;        return nombre;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/ej3/Reproduccion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ej3/Reproduccion.java" />
              <option name="originalContent" value="package ej3;&#10;&#10;public interface Reproduccion {&#10;    public void reproducir();&#10;    public void añadirCancion(Cancion cancion);&#10;    public void eliminarCancion();&#10;    public void verMiLista();&#10;}&#10;" />
              <option name="updatedContent" value="package ej3;&#13;&#10;&#13;&#10;public interface Reproduccion {&#13;&#10;    public void reproducir();&#13;&#10;    public void añadirCancion(Cancion cancion);&#13;&#10;    public void eliminarCancion();&#13;&#10;    public void verMiLista();&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>